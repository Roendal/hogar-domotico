<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>The Environment agent manages and displays the environment.</H3>
-->
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="Environment"
	package="jadex.bdi.examples.cleanerworld_classic.environment">

	<imports>
		<import>jadex.bdi.examples.cleanerworld_classic.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.base.fipa.*</import>
		<import>java.util.logging.Level</import>
	</imports>

	<capabilities>
		<capability name="procap" file="jadex.bdi.planlib.protocols.request.Request"/>
		<capability name="cmscap" file="jadex.bdi.planlib.cms.CMS"/>
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
	</capabilities>

	<beliefs>
		<belief name="environment" class="Environment">
			<!-- Use own environment for remote. -->
			<!--<fact>new Environment()</fact>-->
			<!-- Use shared environment for local. -->
			<fact>Environment.getInstance()</fact>
		</belief>

		<!-- The filter for deciding which request messages are handled in this capability. -->
		<beliefref name="rp_filter">
			<concrete ref="procap.rp_filter"/>
		</beliefref>
		
		<belief name="gui" class="jadex.bdi.planlib.GuiCreator">
			<fact>new jadex.bdi.planlib.GuiCreator(EnvironmentGui.class, new Class[]{jadex.bdi.runtime.IBDIExternalAccess.class}, 
				new Object[]{$scope.getExternalAccess()})</fact>
		</belief>
	</beliefs>

	<goals>
		<achievegoalref name="cms_destroy_component">
			<concrete ref="cmscap.cms_destroy_component"/>
		</achievegoalref>
		<achievegoalref name="df_register">
			<concrete ref="dfcap.df_register"/>
		</achievegoalref>
		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister"/>
		</achievegoalref>

		<querygoalref name="rp_decide_request">
			<concrete ref="procap.rp_decide_request"/>
		</querygoalref>
		<achievegoalref name="rp_execute_request">
			<concrete ref="procap.rp_execute_request"/>
		</achievegoalref>
	</goals>

	<plans>

		<!-- Dispatch the complete vision to a requester. -->
		<plan name="dispatchcompletevision">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchCompleteVisionPlan" />
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestCompleteVision</match>
				</goal>
			</trigger>
		</plan>

		<!-- Dispatch the actual vision to a requester. -->
		<plan name="dispatchvision">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchVisionPlan" />
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestVision</match>
				</goal>
			</trigger>
		</plan>

		<!-- Inform the requester if a pickup action succeeds. -->
		<plan name="pickuprequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="PickUpWastePlan" />
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestPickUpWaste</match>
				</goal>
			</trigger>
		</plan>

		<!-- Inform the requester if a drop action succeeds. -->
		<plan name="droprequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DropWastePlan" />
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestDropWaste</match>
				</goal>
			</trigger>
		</plan>
	</plans>

	<properties>
		<property name="logging.level">Level.SEVERE</property>
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="rp_filter">
					<fact>jadex.commons.IFilter.ALWAYS</fact>
				</initialbelief>
			</beliefs>
			<goals>
				<initialgoal ref="df_register">
<!--					<parameter ref="df">
						<value>new AgentIdentifier("df@vsispro3:1099/JADE", new String[]{"http://134.100.11.53:7778/acc"})</value>
					</parameter>
-->					<parameter ref="description">
						<value>
							new DFComponentDescription(null, new IDFServiceDescription[]{ 
								new DFServiceDescription("dispatch vision", "dispatch vision", "University of Hamburg")},
								null, null, null, null)
						</value>
					</parameter>
				</initialgoal>	
				<endgoal ref="df_deregister"/>
			</goals>
		</configuration>
	</configurations>
</agent>

