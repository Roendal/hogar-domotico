<?xml version="1.0" encoding="UTF-8"?>
	<!--
	<H3>Agente Ambrosio</H3>

	#TODO 
-->
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="Ambrosio" package="jadex.bdi.examples.cleanerworld_classic.ambrosio">

	<imports>
		<import>jadex.bdi.examples.cleanerworld_classic.*</import>
		<import>java.util.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.service.*</import>
		<import>jadex.rules.rulesystem.rules.functions.*</import>
		<import>jadex.base.fipa.*</import>
	</imports>

	<capabilities>
		<capability name="procap"
			file="jadex.bdi.planlib.protocols.request.Request" />
		<!-- Include the df capability as dfcap for finding other agents
			and registering the sentry service. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF" />
	</capabilities>

	<beliefs>
		<belief name="environment" class="IEnvironment">
			<fact>Environment.getInstance()</fact>
		</belief>

		<!-- The connection to the environment (agent). -->
		<belief name="environmentagent" class="jadex.bridge.IComponentIdentifier" />

		<belief name="gui" class="jadex.bdi.planlib.GuiCreator">
			<fact>new jadex.bdi.planlib.GuiCreator(AmbrosioGui.class, new
				Class[]{jadex.bdi.runtime.IBDIExternalAccess.class},
				new
				Object[]{$scope.getExternalAccess()})</fact>
		</belief>

		<belief name="current_date" class="Date">
			<fact>$beliefbase.environment.getDate()</fact>
		</belief>
		<belief name="alarmcondition" class="boolean">
			<fact>false</fact>
		</belief>
		
		
	</beliefs>

	<goals>
		<performgoal name="updateenvironment" exclude="never">
		</performgoal>
		<performgoal name="activatealarmgoal" exclude="never">
			<creationcondition  language="jcl">
				$beliefbase.alarmcondition
			</creationcondition >
			<dropcondition language="jcl">
				!$beliefbase.alarmcondition
			</dropcondition>	
			<deliberation>
				<inhibits ref="updateenvironment" inhibit="when_in_process"/>
			</deliberation>	
		</performgoal>
	</goals>

	<plans>
		<plan name="update">
			<body class="UpdateEnvironmentPlan" />
			<trigger>
				<goal ref="updateenvironment" />
			</trigger>
		</plan>
		<plan name="activatealarm">
			<body class="ActivateAlarmPlan" />
			<trigger>
				<goal ref="activatealarmgoal" />
			</trigger>
		</plan>
	</plans>
	<events>
		<messageevent name="presence_in_room" type="fipa" direction="send">
	        <parameter name="performative" class="String" direction="fixed">
	            <value>SFipa.INFORM</value>
	        </parameter>
	    </messageevent>
	</events>
	

	<expressions>

	</expressions>

	<properties>
		<!--<property name="logging.level">Level.FINE</property>-->
		<!--		<property name="debugging">true</property>-->
		<property name="componentviewer.viewerclass">"jadex.bdi.examples.cleanerworld_classic.ambrosio.AmbrosioViewerPanel"
		</property>
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), IDF.class)</property>
	</properties>

	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="dfcap.df_register">
					<parameter ref="description">
						<value>
							$propertybase.getProperty("dfservice")
								.createDFComponentDescription(null, $propertybase.getProperty("dfservice")
									.createDFServiceDescription("service_ambrosio", "service_ambrosio", "University of Hamburg"))
						</value>
					</parameter>
				</initialgoal>
				<initialgoal ref="updateenvironment" />
				<endgoal ref="dfcap.df_deregister"/>
			</goals>
		</configuration>
	</configurations>
</agent>

